name: Run Containers
on: 
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'bucketActions/**'
      - 'ci_scripts/**'
      - 'terraform/**'
      - '.gitignore'
 
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_STORAGE_BUCKET_NAME: 'lyria-storage'
  AWS_S3_REGION_NAME: 'us-east-2'
  CLOUDFRONT_URL: 'https://d3v05ohikl64ni.cloudfront.net/'
  DEBUG: 'False'
  SONG_ORDER: '5,3,1,0,2,4'
  SECRET_KEY: ${{secrets.SECRET_KEY}}
  STAGING_INSTANCE_ID: 'i-0a196b4cdcbc3ed7e'
  
permissions:
  contents: read
  pull-requests: read

jobs:
  start_staging_server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install boto3
        run: pip install boto3

      - name: Start Staging Server
        id: start_staging_server
        working-directory: ./ci_scripts
        run: python start_staging_server.py

  pylint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install -r requirements/ci-requirements.txt

      - name: Run Pylint
        run: | 
          pylint player --load-plugins pylint_django --django-settings-module=lyria.settings --output-format=text || true
          pylint lyria --load-plugins pylint_django --django-settings-module=lyria.settings --output-format=text  || true
          pylint ci_scripts --output-format=text || true
          pylint bucketActions --output-format=text || true

  unit_tests:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install -r requirements/ci-requirements.txt

      - name: Run Unit Tests
        run: python manage.py test player

      - name: Stop Staging Server
        if: ${{ failure()}}
        working-directory: ./ci_scripts
        run: python stop_staging_server.py

  build_docker_image:
    needs: [pylint, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Lyria Docker image
        run: |
          DATE=$(date +'%Y-%m-%d')
          docker build --tag krisaff84/lyria:${DATE} \
                       --tag krisaff84/lyria:latest .
    
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push image to Docker Hub
        run: docker push krisaff84/lyria:$(date +'%Y-%m-%d') && docker push krisaff84/lyria:latest

      - name: Stop Staging Server
        if: ${{ failure()}}
        working-directory: ./ci_scripts
        run: |
          pip install boto3
          python stop_staging_server.py
  
  pull_image_and_start_containers:
    needs: [build_docker_image, start_staging_server]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install boto3
        run: pip install boto3

      - name: Get Staging Server IP
        id: get_staging_server_ip
        working-directory: ./ci_scripts
        run: python get_staging_server_ip.py

      - name: Set environment variable for staging server IP
        run: echo "STAGING_SERVER_IP=${{ steps.get_staging_server_ip.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Stop Previous Containers and Remove Images
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.STAGING_SERVER_IP}}
          username: ubuntu
          key: ${{secrets.LYRIA_PRIVATE_KEY}}
          script: |
            sudo docker compose down
            sudo docker system prune --all --force


      - name: Copy Files to Staging Server
        uses: appleboy/scp-action@master
        with:
          host: ${{env.STAGING_SERVER_IP}}
          username: ubuntu
          key: ${{secrets.LYRIA_PRIVATE_KEY}}
          source: 'compose.yml, nginx.conf'
          target: '/home/ubuntu'

      - name: Pull Docker Image and Start Containers on Staging Server
        uses: appleboy/ssh-action@master
        env:
          AWS_STORAGE_BUCKET_NAME: ${{ env.AWS_STORAGE_BUCKET_NAME }}
          AWS_S3_REGION_NAME: ${{ env.AWS_S3_REGION_NAME }}
          CLOUDFRONT_URL: ${{ env.CLOUDFRONT_URL }}
          DEBUG: ${{ env.DEBUG }}
          SONG_ORDER: ${{ env.SONG_ORDER }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
        with:
          host: ${{env.STAGING_SERVER_IP}}
          username: ubuntu
          key: ${{secrets.LYRIA_PRIVATE_KEY}}
          envs: AWS_STORAGE_BUCKET_NAME,
                AWS_S3_REGION_NAME,
                CLOUDFRONT_URL,
                DEBUG,
                SONG_ORDER,
                SECRET_KEY
          script: |
            sudo apt update && sudo apt upgrade -y
            sudo docker compose up -d
            unset SECRET_KEY
      
      - name: Stop Staging Server
        if: ${{ failure()}}
        working-directory: ./ci_scripts
        run: python stop_staging_server.py
