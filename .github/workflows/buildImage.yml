name: build_EC2_image
on: 
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'bucketActions/**'
      - 'lyria-dev/**'
      - 'terraform/**'
      - '.github/**' 
    branches:
      - main
  workflow_dispatch:
    inputs:
      approve:
        description: 'Approve the workflow run'
        required: true
        default: 'false'
permissions:
  contents: read
  pull-requests: read

jobs:
  build:
    env:
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_STORAGE_BUCKET_NAME: 'lyria-storage'
      AWS_S3_REGION_NAME: 'us-east-2'
      CLOUDFRONT_URL: 'https://d3v05ohikl64ni.cloudfront.net/'
      DEBUG: 'False'
      SONG_ORDER: '5,3,1,0,2,4'
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      DEV_INSTANCE_ID: 'i-0a196b4cdcbc3ed7e'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Lyria Docker image
        run: |
          DATE=$(date +'%Y-%m-%d')
          docker build --tag krisaff84/lyria:${DATE} \
                       --tag krisaff84/lyria:latest .
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push image to Docker Hub
        run: docker push krisaff84/lyria:$(date +'%Y-%m-%d') && docker push krisaff84/lyria:latest

      - name: Start Development Server
        id: start_dev_server
        working-directory: ./lyria-dev
        run: python start_dev_server.py
             echo "::set-output name=public_ip::${public_ip}"

      - name: Set environment variable for dev server IP
        run: echo "DEV_SERVER_IP=${{ steps.start_dev_server.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Pull Docker image and start containers on instance
        uses: appleboy/ssh-action@master
        with:
          host: ubuntu@${{env.DEV_SERVER_IP}}
          key: ${{secrets.LYRIA_PRIVATE_KEY}}
          script: |
            docker compose down
            docker prune -f
            docker compose up -d
      
      - name: Create AMI from instance
        if: github.event.inputs.approve 
        working-directory: ./lyria-dev
        run: python create_ami.py
             echo "::set-output name=image_id::${image_id}"
